from hog import *
from collections import *
import csv
normal_dice=[{1:1-5/6, 2: 0.16666666666666666, 3: 0.16666666666666666, 4: 0.16666666666666666, 5: 0.16666666666666666, 6: 0.16666666666666666},\
{1:1-((5/6)**2), 4: 0.027777777777777776, 5: 0.05555555555555555, 6: 0.08333333333333333, 7: 0.1111111111111111, 8: 0.1388888888888889, 9: 0.1111111111111111, 10: 0.08333333333333333, 11: 0.05555555555555555, 12: 0.027777777777777776},\
{1:1-((5/6)**3), 6: 0.004629629629629629, 7: 0.013888888888888888, 8: 0.027777777777777776, 9: 0.046296296296296294, 10: 0.06944444444444445, 11: 0.08333333333333333, 12: 0.08796296296296297, 13: 0.08333333333333333, 14: 0.06944444444444445, 15: 0.046296296296296294, 16: 0.027777777777777776, 17: 0.013888888888888888, 18: 0.004629629629629629},\
{1:1-((5/6)**4), 8: 0.0007716049382716049, 9: 0.0030864197530864196, 10: 0.007716049382716049, 11: 0.015432098765432098, 12: 0.02700617283950617, 13: 0.040123456790123455, 14: 0.05246913580246913, 15: 0.06172839506172839, 16: 0.06558641975308642, 17: 0.06172839506172839, 18: 0.05246913580246913, 19: 0.040123456790123455, 20: 0.02700617283950617, 21: 0.015432098765432098, 22: 0.007716049382716049, 23: 0.0030864197530864196, 24: 0.0007716049382716049},\
{1:1-((5/6)**5), 10: 0.0001286008230452675, 11: 0.0006430041152263374, 12: 0.0019290123456790122, 13: 0.0045010288065843625, 14: 0.009002057613168725, 15: 0.015560699588477367, 16: 0.023791152263374485, 17: 0.03279320987654321, 18: 0.0411522633744856, 19: 0.04693930041152263, 20: 0.048996913580246916, 21: 0.04693930041152263, 22: 0.0411522633744856, 23: 0.03279320987654321, 24: 0.023791152263374485, 25: 0.015560699588477367, 26: 0.009002057613168725, 27: 0.0045010288065843625, 28: 0.0019290123456790122, 29: 0.0006430041152263374, 30: 0.0001286008230452675},\
{1:1-((5/6)**6), 12: 2.143347050754458e-05, 13: 0.0001286008230452675, 14: 0.0004501028806584362, 15: 0.0012002743484224967, 16: 0.002700617283950617, 17: 0.005272633744855967, 18: 0.009130658436213992, 19: 0.01427469135802469, 20: 0.020383230452674896, 21: 0.02670610425240055, 22: 0.03227880658436214, 23: 0.03613683127572016, 24: 0.037530006858710566, 25: 0.03613683127572016, 26: 0.03227880658436214, 27: 0.02670610425240055, 28: 0.020383230452674896, 29: 0.01427469135802469, 30: 0.009130658436213992, 31: 0.005272633744855967, 32: 0.002700617283950617, 33: 0.0012002743484224967, 34: 0.0004501028806584362, 35: 0.0001286008230452675, 36: 2.143347050754458e-05},\
{1:1-((5/6)**7), 14: 3.5722450845907635e-06, 15: 2.5005715592135344e-05, 16: 0.00010002286236854138, 17: 0.00030006858710562417, 18: 0.0007501714677640603, 19: 0.0016253715134887975, 20: 0.003125714449016918, 21: 0.005429812528577961, 22: 0.008626971879286694, 23: 0.01262788637402835, 24: 0.01712891518061271, 25: 0.021629943987197073, 26: 0.025505829903978053, 27: 0.028131430041152265, 28: 0.02906021376314586, 29: 0.028131430041152265, 30: 0.025505829903978053, 31: 0.021629943987197073, 32: 0.01712891518061271, 33: 0.01262788637402835, 34: 0.008626971879286694, 35: 0.005429812528577961, 36: 0.003125714449016918, 37: 0.0016253715134887975, 38: 0.0007501714677640603, 39: 0.00030006858710562417, 40: 0.00010002286236854138, 41: 2.5005715592135344e-05, 42: 3.5722450845907635e-06},\
{1:1-((5/6)**8), 16: 5.953741807651273e-07, 17: 4.762993446121018e-06, 18: 2.143347050754458e-05, 19: 7.144490169181528e-05, 20: 0.000196473479652492, 21: 0.0004667733577198598, 22: 0.0009835581466239903, 23: 0.0018718564243255602, 24: 0.003259673639689072, 25: 0.00523929279073312, 26: 0.007823216735253772, 27: 0.010907254991617132, 28: 0.014253257887517147, 29: 0.017504000914494743, 30: 0.020242722146014327, 31: 0.02207647462277092, 32: 0.02272245560890108, 33: 0.02207647462277092, 34: 0.020242722146014327, 35: 0.017504000914494743, 36: 0.014253257887517147, 37: 0.010907254991617132, 38: 0.007823216735253772, 39: 0.00523929279073312, 40: 0.003259673639689072, 41: 0.0018718564243255602, 42: 0.0009835581466239903, 43: 0.0004667733577198598, 44: 0.000196473479652492, 45: 7.144490169181528e-05, 46: 2.143347050754458e-05, 47: 4.762993446121018e-06, 48: 5.953741807651273e-07},\
{1:1-((5/6)**9), 18: 9.92290301275212e-08, 19: 8.930612711476909e-07, 20: 4.465306355738455e-06, 21: 1.6372789971041e-05, 22: 4.9118369913123e-05, 23: 0.0001268147005029721, 24: 0.000289947226032617, 25: 0.0005983510516689529, 26: 0.001129722508001829, 27: 0.0019701923931819336, 28: 0.0031962662894375856, 29: 0.004850215763603109, 30: 0.006913782674135041, 31: 0.009287837219935985, 32: 0.01178840877914952, 33: 0.014163951760402377, 34: 0.016133151863283037, 35: 0.017437021319158665, 36: 0.017893474857745263, 37: 0.017437021319158665, 38: 0.016133151863283037, 39: 0.014163951760402377, 40: 0.01178840877914952, 41: 0.009287837219935985, 42: 0.006913782674135041, 43: 0.004850215763603109, 44: 0.0031962662894375856, 45: 0.0019701923931819336, 46: 0.001129722508001829, 47: 0.0005983510516689529, 48: 0.000289947226032617, 49: 0.0001268147005029721, 50: 4.9118369913123e-05, 51: 1.6372789971041e-05, 52: 4.465306355738455e-06, 53: 8.930612711476909e-07, 54: 9.92290301275212e-08},\
{1:1-((5/6)**10), 20: 1.65381716879202e-08, 21: 1.65381716879202e-07, 22: 9.095994428356111e-07, 23: 3.6383977713424442e-06, 24: 1.1824792756862945e-05, 25: 3.2944038002337044e-05, 26: 8.111973212924859e-05, 27: 0.000180100689681451, 28: 0.00036565897601991565, 29: 0.0006858379798980507, 30: 0.0011974132447204863, 31: 0.001957458000982235, 32: 0.003010029938059916, 33: 0.004369715723382276, 34: 0.00600608512104354, 35: 0.007834032699537672, 36: 0.009714522049484326, 37: 0.011468395156988264, 38: 0.012902668096623144, 39: 0.013844103519958, 40: 0.014172303537104778, 41: 0.013844103519958, 42: 0.012902668096623144, 43: 0.011468395156988264, 44: 0.009714522049484326, 45: 0.007834032699537672, 46: 0.00600608512104354, 47: 0.004369715723382276, 48: 0.003010029938059916, 49: 0.001957458000982235, 50: 0.0011974132447204863, 51: 0.0006858379798980507, 52: 0.00036565897601991565, 53: 0.000180100689681451, 54: 8.111973212924859e-05, 55: 3.2944038002337044e-05, 56: 1.1824792756862945e-05, 57: 3.6383977713424442e-06, 58: 9.095994428356111e-07, 59: 1.65381716879202e-07, 60: 1.65381716879202e-08}]
special_dices=[{1:1/8, 2: 0.125, 3: 0.125, 4: 0.125, 5: 0.125, 6: 0.125, 7: 0.125, 8: 0.125}, \
{1:1-(7/8)**2, 4: 0.015625, 5: 0.03125, 6: 0.046875, 7: 0.0625, 8: 0.078125, 9: 0.09375, 10: 0.109375, 11: 0.09375, 12: 0.078125, 13: 0.0625, 14: 0.046875, 15: 0.03125, 16: 0.015625}, \
{1:1-(7/8)**3, 6: 0.001953125, 7: 0.005859375, 8: 0.01171875, 9: 0.01953125, 10: 0.029296875, 11: 0.041015625, 12: 0.0546875, 13: 0.064453125, 14: 0.0703125, 15: 0.072265625, 16: 0.0703125, 17: 0.064453125, 18: 0.0546875, 19: 0.041015625, 20: 0.029296875, 21: 0.01953125, 22: 0.01171875, 23: 0.005859375, 24: 0.001953125}, \
{1:1-(7/8)**4, 8: 0.000244140625, 9: 0.0009765625, 10: 0.00244140625, 11: 0.0048828125, 12: 0.008544921875, 13: 0.013671875, 14: 0.0205078125, 15: 0.0283203125, 16: 0.036376953125, 17: 0.0439453125, 18: 0.05029296875, 19: 0.0546875, 20: 0.056396484375, 21: 0.0546875, 22: 0.05029296875, 23: 0.0439453125, 24: 0.036376953125, 25: 0.0283203125, 26: 0.0205078125, 27: 0.013671875, 28: 0.008544921875, 29: 0.0048828125, 30: 0.00244140625, 31: 0.0009765625, 32: 0.000244140625}, \
{1:1-(7/8)**5, 10: 3.0517578125e-05, 11: 0.000152587890625, 12: 0.000457763671875, 13: 0.001068115234375, 14: 0.00213623046875, 15: 0.00384521484375, 16: 0.00640869140625, 17: 0.009918212890625, 18: 0.01434326171875, 19: 0.01953125, 20: 0.02520751953125, 21: 0.030975341796875, 22: 0.03631591796875, 23: 0.04058837890625, 24: 0.0433349609375, 25: 0.044281005859375, 26: 0.0433349609375, 27: 0.04058837890625, 28: 0.03631591796875, 29: 0.030975341796875, 30: 0.02520751953125, 31: 0.01953125, 32: 0.01434326171875, 33: 0.009918212890625, 34: 0.00640869140625, 35: 0.00384521484375, 36: 0.00213623046875, 37: 0.001068115234375, 38: 0.000457763671875, 39: 0.000152587890625, 40: 3.0517578125e-05}, \
{1:1-(7/8)**6 ,12: 3.814697265625e-06, 13: 2.288818359375e-05, 14: 8.0108642578125e-05, 15: 0.000213623046875, 16: 0.00048065185546875, 17: 0.0009613037109375, 18: 0.00176239013671875, 19: 0.00299835205078125, 20: 0.004772186279296875, 21: 0.0071563720703125, 22: 0.010173797607421875, 23: 0.0137786865234375, 24: 0.0178375244140625, 25: 0.0221099853515625, 26: 0.026287078857421875, 27: 0.030029296875, 28: 0.0330047607421875, 29: 0.0349273681640625, 30: 0.035594940185546875, 31: 0.0349273681640625, 32: 0.0330047607421875, 33: 0.030029296875, 34: 0.026287078857421875, 35: 0.0221099853515625, 36: 0.0178375244140625, 37: 0.0137786865234375, 38: 0.010173797607421875, 39: 0.0071563720703125, 40: 0.004772186279296875, 41: 0.00299835205078125, 42: 0.00176239013671875, 43: 0.0009613037109375, 44: 0.00048065185546875, 45: 0.000213623046875, 46: 8.0108642578125e-05, 47: 2.288818359375e-05, 48: 3.814697265625e-06}, \
{1:1-(7/8)**7, 14: 4.76837158203125e-07, 15: 3.337860107421875e-06, 16: 1.33514404296875e-05, 17: 4.00543212890625e-05, 18: 0.00010013580322265625, 19: 0.00022029876708984375, 20: 0.0004405975341796875, 21: 0.0008149147033691406, 22: 0.0014085769653320312, 23: 0.002293109893798828, 24: 0.0035381317138671875, 25: 0.005200386047363281, 26: 0.007309913635253906, 27: 0.009853363037109375, 28: 0.012764453887939453, 29: 0.015921592712402344, 30: 0.01915264129638672, 31: 0.022246837615966797, 32: 0.02497386932373047, 33: 0.02711009979248047, 34: 0.028471946716308594, 35: 0.02893972396850586, 36: 0.028471946716308594, 37: 0.02711009979248047, 38: 0.02497386932373047, 39: 0.022246837615966797, 40: 0.01915264129638672, 41: 0.015921592712402344, 42: 0.012764453887939453, 43: 0.009853363037109375, 44: 0.007309913635253906, 45: 0.005200386047363281, 46: 0.0035381317138671875, 47: 0.002293109893798828, 48: 0.0014085769653320312, 49: 0.0008149147033691406, 50: 0.0004405975341796875, 51: 0.00022029876708984375, 52: 0.00010013580322265625, 53: 4.00543212890625e-05, 54: 1.33514404296875e-05, 55: 3.337860107421875e-06, 56: 4.76837158203125e-07}, \
{1:1-(7/8)**8, 16: 5.960464477539063e-08, 17: 4.76837158203125e-07, 18: 2.1457672119140625e-06, 19: 7.152557373046875e-06, 20: 1.9669532775878906e-05, 21: 4.7206878662109375e-05, 22: 0.00010228157043457031, 23: 0.0002040863037109375, 24: 0.00037974119186401367, 25: 0.0006647109985351562, 26: 0.0011019706726074219, 27: 0.001739501953125, 28: 0.002625703811645508, 29: 0.0038022994995117188, 30: 0.005295991897583008, 31: 0.007110118865966797, 32: 0.009217560291290283, 33: 0.011556148529052734, 34: 0.014027833938598633, 35: 0.016502857208251953, 36: 0.018830180168151855, 37: 0.020852088928222656, 38: 0.022420883178710938, 39: 0.023415565490722656, 40: 0.023756444454193115, 41: 0.023415565490722656, 42: 0.022420883178710938, 43: 0.020852088928222656, 44: 0.018830180168151855, 45: 0.016502857208251953, 46: 0.014027833938598633, 47: 0.011556148529052734, 48: 0.009217560291290283, 49: 0.007110118865966797, 50: 0.005295991897583008, 51: 0.0038022994995117188, 52: 0.002625703811645508, 53: 0.001739501953125, 54: 0.0011019706726074219, 55: 0.0006647109985351562, 56: 0.00037974119186401367, 57: 0.0002040863037109375, 58: 0.00010228157043457031, 59: 4.7206878662109375e-05, 60: 1.9669532775878906e-05, 61: 7.152557373046875e-06, 62: 2.1457672119140625e-06, 63: 4.76837158203125e-07, 64: 5.960464477539063e-08}, \
{1:1-(7/8)**9, 18: 7.450580596923828e-09, 19: 6.705522537231445e-08, 20: 3.3527612686157227e-07, 21: 1.2293457984924316e-06, 22: 3.688037395477295e-06, 23: 9.588897228240967e-06, 24: 2.2374093532562256e-05, 25: 4.787743091583252e-05, 26: 9.528547525405884e-05, 27: 0.0001781061291694641, 28: 0.000314958393573761, 29: 0.0005299374461174011, 30: 0.0008522495627403259, 31: 0.0013147518038749695, 32: 0.0019512400031089783, 33: 0.002792537212371826, 34: 0.003861643373966217, 35: 0.005168415606021881, 36: 0.006704457104206085, 37: 0.008439101278781891, 38: 0.010317586362361908, 39: 0.012262098491191864, 40: 0.014175944030284882, 41: 0.015950694680213928, 42: 0.017475731670856476, 43: 0.01864919811487198, 44: 0.019388951361179352, 45: 0.019641689956188202, 46: 0.019388951361179352, 47: 0.01864919811487198, 48: 0.017475731670856476, 49: 0.015950694680213928, 50: 0.014175944030284882, 51: 0.012262098491191864, 52: 0.010317586362361908, 53: 0.008439101278781891, 54: 0.006704457104206085, 55: 0.005168415606021881, 56: 0.003861643373966217, 57: 0.002792537212371826, 58: 0.0019512400031089783, 59: 0.0013147518038749695, 60: 0.0008522495627403259, 61: 0.0005299374461174011, 62: 0.000314958393573761, 63: 0.0001781061291694641, 64: 9.528547525405884e-05, 65: 4.787743091583252e-05, 66: 2.2374093532562256e-05, 67: 9.588897228240967e-06, 68: 3.688037395477295e-06, 69: 1.2293457984924316e-06, 70: 3.3527612686157227e-07, 71: 6.705522537231445e-08, 72: 7.450580596923828e-09}, \
{1:1-(7/8)**10, 20: 9.313225746154785e-10, 21: 9.313225746154785e-09, 22: 5.122274160385132e-08, 23: 2.0489096641540527e-07, 24: 6.658956408500671e-07, 25: 1.864507794380188e-06, 26: 4.66126948595047e-06, 27: 1.064501702785492e-05, 28: 2.2547319531440735e-05, 29: 4.476867616176605e-05, 30: 8.398480713367462e-05, 31: 0.0001497659832239151, 32: 0.0002550985664129257, 33: 0.0004166457802057266, 34: 0.0006545661017298698, 35: 0.0009917225688695908, 36: 0.0014521647244691849, 37: 0.0020588468760252, 38: 0.0028306618332862854, 39: 0.003779018297791481, 40: 0.004904372617602348, 41: 0.006193229928612709, 42: 0.007616155780851841, 43: 0.009127287194132805, 44: 0.01066570170223713, 45: 0.012158794328570366, 46: 0.013527525588870049, 47: 0.014693038538098335, 48: 0.015583895146846771, 49: 0.01614305190742016, 50: 0.016333681531250477, 51: 0.01614305190742016, 52: 0.015583895146846771, 53: 0.014693038538098335, 54: 0.013527525588870049, 55: 0.012158794328570366, 56: 0.01066570170223713, 57: 0.009127287194132805, 58: 0.007616155780851841, 59: 0.006193229928612709, 60: 0.004904372617602348, 61: 0.003779018297791481, 62: 0.0028306618332862854, 63: 0.0020588468760252, 64: 0.0014521647244691849, 65: 0.0009917225688695908, 66: 0.0006545661017298698, 67: 0.0004166457802057266, 68: 0.0002550985664129257, 69: 0.0001497659832239151, 70: 8.398480713367462e-05, 71: 4.476867616176605e-05, 72: 2.2547319531440735e-05, 73: 1.064501702785492e-05, 74: 4.66126948595047e-06, 75: 1.864507794380188e-06, 76: 6.658956408500671e-07, 77: 2.0489096641540527e-07, 78: 5.122274160385132e-08, 79: 9.313225746154785e-09, 80: 9.313225746154785e-10}]

class Hogmdp(object):
    def __init__(self,goal=100):
        self.goal=goal
    def next_turn(self,x):
        if x == 7:
            return 0
        else:
            return x+1
    def action(self):
        result = []
        result.append('piggy points')
        for i in range(1,11):
            result.append('roll'+str(i))
        result.append('time trot')
        return result
    def new_state(self,i,j,n,action):
        result=[]
        add_points = []
        prob = []
        next0=[]
        more=['more boar'+str(z) for z in range(1,11)]
        if 'roll' in action and 'extra roll' not in action:
            num_dice=action[-1]
            dict=normal_dice[int(num_dice)-1]
            # for a in range(1, 11):
            #     next0.append('extra roll' + str(a))
            for item in dict.keys():
                add_points.append(item)
                prob.append(dict[item])
        elif action == 'time trot':
            for a in range(1, 11):
                next0.append('extra roll' + str(a))
            num_dice = (n % 8)
            if num_dice == 0:
                add_points.append(piggy_points(j))
                prob.append(1)
            else:
                dict = normal_dice[int(num_dice)-1]
                for item in dict.keys():
                    add_points.append(item)
                    prob.append((dict[item]))
        elif 'extra roll' in action or 'more boar' in action:
            num_dice = action[-1]
            dict = special_dices[int(num_dice) - 1]
            for item in dict.keys():
                add_points.append(item)
                prob.append(dict[item])
        elif action == 'piggy points':
            add_points.append(piggy_points(j))
            prob.append(1)
        for index in range(len(add_points)):
            if not next0:
                if more_boar(i+add_points[index],j):
                    if i+add_points[index]>self.goal:
                        result.append(('', self.goal, j, self.next_turn(n), prob[index]))
                    else:
                        result.append((more,i+add_points[index],j,self.next_turn(n),prob[index]))
                else:
                    if i+add_points[index]>self.goal:
                        result.append(('',self.goal,j,self.next_turn(n),prob[index]))
                    else:
                        result.append(('',i+add_points[index],j,self.next_turn(n),prob[index]))
            else:
                result.append((next0,i+add_points[index],j,self.next_turn(n),prob[index]))
        return result
    def getstate(self):
        return range(self.goal-1,-1,-1)
    def getgoal(self):
        return self.goal
def value_iteration(hog):
    Value=defaultdict(float)
    for i in hog.getstate():
        for j in hog.getstate():
            for k in range(8):
                if i<=99 and i>=97:
                    Value[(i,j,k)]=1.
                else:
                    Value[(i,j,k)]=0.
    def More_boar(score,opponent_score,turn,prob,actions):
        max_score=-1.0
        total=0.
        num_rolls=''
        action2=''
        if (score,opponent_score,turn) in cache:
            max_score,num_rolls=cache[(score,opponent_score,turn)]
        else:
            for action in actions:
                for next3,new_score,new_opponent,new_turn,new_prob in hog.new_state(score,opponent_score,turn,action):
                    if next3=='':
                        if new_score==hog.getgoal():
                            total+=new_prob*1
                        else:
                            total += (1 - Value[(new_opponent, new_score, new_turn)]) * new_prob
                    else:
                        add, action2=More_boar(new_score,new_opponent,new_turn,new_prob,next3)
                        total+=add* new_prob
                if total>max_score:
                    max_score=total
                    num_rolls=action+' '+action2
                    cache[(score, opponent_score, turn)]=(max_score,num_rolls)
                total=0.
        return max_score, num_rolls
    def extra_roll(score,opponent_score,turn,action): #Ex: extra_roll(95,99,10,extra roll1):
        highest=0.
        highest_action=''
        total=0.
        for next2, new_score, new_opponent, new_turn, new_prob in hog.new_state(score, opponent_score, turn, action):
            if next2=='':
                if new_score==hog.getgoal():
                    total+=new_prob*1

                else:
                    total += (1 - Value[(new_opponent, new_score, new_turn)]) * new_prob

            else:
                points1, action4=More_boar(new_score,new_opponent,new_turn,new_prob,next2)

                highest_action=action4
                total += points1*new_prob
        return total, highest_action
    def Sum_value(score,opponent_score,turn,action):
         total=0.
         best_action = ''
         for next1,new_score,new_opponent,new_turn,prob in hog.new_state(score,opponent_score,turn,action):
             if next1=='':
                 if new_score==hog.getgoal():
                     total+=prob*1
                 else:
                     total+=(1-Value[(new_opponent,new_score,new_turn)])*prob
             elif 'more boar' in next1[0]:
                if new_score == hog.getgoal():
                    total+=prob*1
                else:
                    points, action3=More_boar(new_score, new_opponent, new_turn, prob, next1)
                    total+=prob*points
                    best_action=action3
             elif 'extra roll' in next1[0]:
                 if new_score == hog.getgoal():
                     total += prob * 1
                 else:
                     max_score=0
                     for i in range(len(next1)):
                         temp, action5=extra_roll(new_score,new_opponent,new_turn,next1[i])
                         if temp>max_score:
                            max_score=temp
                            best_action=next1[i]+' '+action5
                     total += prob*max_score
         return total, best_action
    def Time_trotValue(score,opponent_score,turn):
        chance=0.125
        total=0.
        best_action1=''
        for next1, new_score, new_opponent, new_turn, prob in hog.new_state(score, opponent_score, turn, action):
            temp=0.
            if next1=='':
                if new_score==hog.getgoal():
                    temp+=prob+1
                else:
                    temp+=(1-Value[(new_opponent,new_score,new_turn)])*prob
            elif 'extra roll' in next1[0]:
                if new_score==hog.getgoal():
                    temp+=prob*1
                else:
                    max_score = 0
                    for i in range(len(next1)):
                        temp, action6 = extra_roll(new_score, new_opponent, new_turn, next1[i])
                        if temp > max_score:
                            max_score = temp
                            best_action1 = next1[i] + ' ' + action6
                    temp+= prob*max_score
            total+=chance*temp
        return total
    count=1
    while True:
        cache = {}
        print(count)
        count+=1
        new_V=defaultdict(float)
        ultimate_action={}
        for i in hog.getstate():
            print(i)
            for j in hog.getstate():
                for k in range(8):
                    if i<=99 and i>=97:
                        new_V[(i,j,k)]=1.
                        ultimate_action[(i,j,k)]='piggy points'
                    else:
                        max_prob=0.
                        for action in hog.action():
                            temp, action1=Sum_value(i,j,k,action)
                            if max_prob<temp:
                                max_prob=temp
                                good_action=action+' '+action1
                                ultimate_action[(i,j,k)]=good_action
                        new_V[(i,j,k)]=max_prob
        max_diff=0.
        for i in hog.getstate():
            for j in hog.getstate():
                for k in range(8):
                    if abs(Value[(i,j,k)] - new_V[(i,j,k)])>max_diff:
                        max_diff=abs(Value[(i,j,k)] - new_V[(i,j,k)])
        print(max_diff)
        if max_diff<1e-6:
            break
        Value=new_V
    list_of_dict = []
    list_of_dict2 = []
    k = 1
    dict1 = {}
    dict2 = {}
    for key in Value.keys():
        if k % 800 == 0:
            dict1[(key[1], key[2])] = Value[key]
            dict2[(key[1], key[2])] = ultimate_action[key]
            list_of_dict.append(dict1)
            list_of_dict2.append(dict2)
            dict1 = {}
            dict2 = {}
        else:
            dict1[(key[1], key[2])] = Value[key]
            dict2[(key[1], key[2])] = ultimate_action[key]
        k = k + 1
    with open('hog_contest.csv', 'w', newline='') as f:
        fieldname = []
        for i in range(99, -1, -1):
            for j in range(8):
                fieldname.append((i, j))
        writer = csv.DictWriter(f, fieldnames=fieldname)
        writer.writeheader()
        for dict in list_of_dict:
            writer.writerow(dict)
    with open('hog_contest1.csv', 'w', newline='') as s:
        fieldname1 = []
        for a in range(99, -1, -1):
            for b in range(8):
                fieldname1.append((a, b))
        writer1 = csv.DictWriter(s, fieldnames=fieldname1)
        writer1.writeheader()
        for dict3 in list_of_dict2:
            writer1.writerow(dict3)





hog=Hogmdp(100)
value_iteration(hog)
